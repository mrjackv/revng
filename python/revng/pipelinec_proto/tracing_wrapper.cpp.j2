{#
    This file is distributed under the MIT License. See LICENSE.md for details.
#}
#include "TracingPrototypes.h"

{% for function in functions %}
{{ function.return_type.type_ }} {{ function.name }}({{ print_arguments(function.arguments) }}) {
    if (TracingEnabled) {
        std::lock_guard guard(TraceLock);
        Tracer->functionPrelude("{{ function.name }}");
        {%- for argument in function.arguments %}
        Tracer->newVariable();
        Tracer->{{ trace_variable(argument, function) }};
        {%- endfor %}
        Tracer->endArguments();
        {%- if function.return_type.type_ != "void" %}
        auto ret = _{{ function.name }}({{ print_arguments(function.arguments, True) }});
        Tracer->{{ trace_variable(function.return_type, function) }};
        return ret;
        {%- else %}
        _{{ function.name }}({{ print_arguments(function.arguments, True) }});
        Tracer->printVoid();
        {%- endif %}
    } else {
        {%- if function.return_type.type_ != "void" %}
        return _{{ function.name }}({{ print_arguments(function.arguments, True) }});
        {%- else %}
        _{{ function.name }}({{ print_arguments(function.arguments, True) }});
        {%- endif %}
    }
}
{% endfor %}
