#
# This file is distributed under the MIT License. See LICENSE.md for details.
#

commands:
  - type: revng.lifted
    from:
      - type: revng-qa.compiled
    suffix: .bc
    command: revng lift "$INPUT" "$OUTPUT"
  - type: revng.abi-enforced-for-decompilation
    from:
      - type: revng.lifted
    suffix: .bc
    command: |-
      revng llvm pipeline "$INPUT" "$OUTPUT" Lift Lift ":Root" --analysis DetectABI;
      revng llvm pipeline "$OUTPUT" "$OUTPUT" Lift EnforceABI "*:CSVsPromoted";
  - type: revng.assembly-ptml
    from:
      - type: revng-qa.compiled
      - type: revng.abi-enforced-for-decompilation
    suffix: .ptml.yml
    command: |-
      MODEL="$$(mktemp)";
      trap 'rm -f -- "$$MODEL"' EXIT;
      revng model dump "$INPUT2" > "$$MODEL";
      revng pipeline
        -m "$$MODEL"
        -i "begin:input:$INPUT1"
        -i "EnforceABI:module.ll:$INPUT2"
        -o "YieldAssembly:assembly-ptml.yml:$OUTPUT"
        YieldAssembly:assembly-ptml.yml:*:FunctionAssemblyPTML
  - type: revng.cfg-svg
    from:
      - type: revng-qa.compiled
      - type: revng.abi-enforced-for-decompilation
    suffix: .svg.yml
    command: |-
      MODEL="$$(mktemp)";
      trap 'rm -f -- "$$MODEL"' EXIT;
      revng model dump "$INPUT2" > "$$MODEL";
      revng pipeline
        -m "$$MODEL"
        -i "begin:input:$INPUT1"
        -i "EnforceABI:module.ll:$INPUT2"
        -o "YieldCFG:cfg-svg.yml:$OUTPUT"
        YieldCFG:cfg-svg.yml:*:FunctionControlFlowGraphSVG
  - type: revng.test-python-model-serialization-roundtrip
    from:
      - type: revng.abi-enforced-for-decompilation
    command: |-
      revng model opt -Y -verify "$INPUT"
        | ./serialize-deserialize.py
        | revng model opt -Y -verify
        | revng model diff /dev/stdin "$INPUT" -o /dev/null
    scripts:
      serialize-deserialize.py: |-
        #!/usr/bin/env python3

        import sys
        import yaml

        from revng import model

        m = yaml.load(sys.stdin, Loader=model.YamlLoader)
        print(yaml.dump(m, Dumper=model.YamlDumper))
  - type: revng.test-typescript-model-serialization-roundtrip
    from:
      - type: revng.abi-enforced-for-decompilation
    command: |-
      revng model opt -Y -verify "$INPUT"
        | ./serialize-deserialize.js
        | revng model opt -Y -verify
        | revng model diff /dev/stdin "$INPUT" -o /dev/null
    scripts:
      serialize-deserialize.js: |-
        #!/usr/bin/env node

        //
        // This file is distributed under the MIT License. See LICENSE.md for details.
        //

        "use strict";

        const fs = require("fs");
        const process = require("process");
        const model = require("revng-model");

        const file = fs.readFileSync("/dev/stdin", "utf-8");
        const model_file = model.parseModel(file);
        fs.writeFileSync("/dev/stdout", model.dumpModel(model_file));
  - type: revng.test-daemon
    from:
      - type: revng-qa.compiled
        filter: example-executable-1
    command: TMP="$$(mktemp)";
      trap 'rm -f -- "$$TMP"' EXIT;
      if ! python3 -m pytest "${SOURCES_ROOT}/tests/daemon/test.py" --binary "$INPUT" >& "$$TMP"; then
      cat "$$TMP";
      exit 1;
      fi;
  - type: test-model-diff
    from:
      - type: revng-qa.compiled
        filter: example-executable-1
      - type: revng-qa.compiled
        filter: example-executable-2
    command: |-
      revng model import binary "$INPUT1" > input1.yml;
      revng model import binary "$INPUT2" > input2.yml;
      ( revng model diff input1.yml input2.yml || true ) | revng model apply input1.yml | diff -u - input2.yml
